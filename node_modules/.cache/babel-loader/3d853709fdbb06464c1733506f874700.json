{"ast":null,"code":"import _defineProperty from \"/Users/kaushik/Downloads/Drag-Drop-Taskapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/kaushik/Downloads/Drag-Drop-Taskapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/kaushik/Downloads/Drag-Drop-Taskapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kaushik/Downloads/Drag-Drop-Taskapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kaushik/Downloads/Drag-Drop-Taskapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kaushik/Downloads/Drag-Drop-Taskapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kaushik/Downloads/Drag-Drop-Taskapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/kaushik/Downloads/Drag-Drop-Taskapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/kaushik/Downloads/Drag-Drop-Taskapp/src/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\ndisplay: flex,\\nmargin: 100%\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport intialData from './intialData';\nimport Coloumn from './coloumn';\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nvar Container = styled.div(_templateObject());\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = intialData;\n\n    _this.onDragStart = function (start) {\n      var homeIndex = _this.state.columnOrder.indexOf(start.source.droppableId);\n\n      _this.setState({\n        homeIndex: homeIndex\n      });\n    };\n\n    _this.onDragEnd = function (result) {\n      var _objectSpread3;\n\n      _this.setState({\n        homeIndex: null\n      });\n\n      document.body.style.color = 'inherit';\n      var destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId;\n      if (!destination) return;\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      var start = _this.state.columns[source.droppableId];\n      var finish = _this.state.columns[destination.droppableId];\n\n      if (start === finish) {\n        var newTaskIds = Array.from(start.taskIds); //console.log(newTaskIds);\n\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n\n        var newColoumn = _objectSpread({}, start, {\n          taskIds: newTaskIds\n        });\n\n        var _newState = _objectSpread({}, _this.state, {\n          columns: _objectSpread({}, _this.state.columns, _defineProperty({}, newColoumn.id, newColoumn))\n        });\n\n        _this.setState(_newState);\n\n        return;\n      }\n\n      var startTaskIds = Array.from(start.taskIds);\n      var finishTaskIds = Array.from(finish.taskIds);\n      startTaskIds.splice(source.index, 1);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n\n      var newStart = _objectSpread({}, start, {\n        taskIds: startTaskIds\n      });\n\n      var newFinish = _objectSpread({}, finish, {\n        taskIds: finishTaskIds\n      }); //console.log(newStart);\n      //console.log(newFinish);\n\n\n      var newState = _objectSpread({}, _this.state, {\n        columns: _objectSpread({}, _this.state.columns, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newStart.id, newStart), _defineProperty(_objectSpread3, newFinish.id, newFinish), _objectSpread3))\n      }); //console.log(newState);\n\n\n      _this.setState(newState);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        onDragStart: this.onDragStart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, this.state.columnOrder.map(function (coloumnId, index) {\n        var colomn = _this2.state.columns[coloumnId];\n        var task = colomn.taskIds.map(function (taskId) {\n          return _this2.state.tasks[taskId];\n        });\n        var isDropDisabled = index < _this2.state.homeIndex; //console.log(this.state.columns.id);\n        //console.log(isDropDisabled);\n\n        return React.createElement(Coloumn, {\n          key: \"{colomn.id}\",\n          coloumn: colomn,\n          tasks: task,\n          isDropDisabled: isDropDisabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 119\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA","map":{"version":3,"sources":["/Users/kaushik/Downloads/Drag-Drop-Taskapp/src/index.js"],"names":["React","ReactDOM","intialData","Coloumn","DragDropContext","styled","Container","div","App","state","onDragStart","start","homeIndex","columnOrder","indexOf","source","droppableId","setState","onDragEnd","result","document","body","style","color","destination","draggableId","index","columns","finish","newTaskIds","Array","from","taskIds","splice","newColoumn","newState","id","startTaskIds","finishTaskIds","newStart","newFinish","map","coloumnId","colomn","task","taskId","tasks","isDropDisabled","Component","render","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,qBAAP;AACA,SAAQC,eAAR,QAA8B,qBAA9B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,IAAMC,SAAS,GAAED,MAAM,CAACE,GAAT,mBAAf;;IAGMC,G;;;;;;;;;;;;;;;;;UACFC,K,GAAQP,U;;UACRQ,W,GAAc,UAAAC,KAAK,EAAG;AAClB,UAAMC,SAAS,GAAG,MAAKH,KAAL,CAAWI,WAAX,CAAuBC,OAAvB,CAA+BH,KAAK,CAACI,MAAN,CAAaC,WAA5C,CAAlB;;AAEA,YAAKC,QAAL,CAAc;AACVL,QAAAA,SAAS,EAATA;AADU,OAAd;AAGH,K;;UACDM,S,GAAY,UAAAC,MAAM,EAAG;AAAA;;AACjB,YAAKF,QAAL,CAAc;AACVL,QAAAA,SAAS,EAAE;AADD,OAAd;;AAGIQ,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,KAApB,GAA2B,SAA3B;AAJa,UAKLC,WALK,GAK+BL,MAL/B,CAKLK,WALK;AAAA,UAKQT,MALR,GAK+BI,MAL/B,CAKQJ,MALR;AAAA,UAKgBU,WALhB,GAK+BN,MAL/B,CAKgBM,WALhB;AAMb,UAAG,CAACD,WAAJ,EACI;;AACJ,UACIA,WAAW,CAACR,WAAZ,KAA0BD,MAAM,CAACC,WAAjC,IACAQ,WAAW,CAACE,KAAZ,KAAoBX,MAAM,CAACW,KAF/B,EAGC;AACG;AACH;;AAED,UAAMf,KAAK,GAAE,MAAKF,KAAL,CAAWkB,OAAX,CAAmBZ,MAAM,CAACC,WAA1B,CAAb;AACA,UAAMY,MAAM,GAAE,MAAKnB,KAAL,CAAWkB,OAAX,CAAmBH,WAAW,CAACR,WAA/B,CAAd;;AAEA,UAAGL,KAAK,KAAIiB,MAAZ,EAAmB;AACX,YAAMC,UAAU,GAAEC,KAAK,CAACC,IAAN,CAAWpB,KAAK,CAACqB,OAAjB,CAAlB,CADW,CAEX;;AACAH,QAAAA,UAAU,CAACI,MAAX,CAAkBlB,MAAM,CAACW,KAAzB,EAA+B,CAA/B;AACAG,QAAAA,UAAU,CAACI,MAAX,CAAkBT,WAAW,CAACE,KAA9B,EAAoC,CAApC,EAAsCD,WAAtC;;AAGA,YAAMS,UAAU,qBACTvB,KADS;AAEZqB,UAAAA,OAAO,EAACH;AAFI,UAAhB;;AAIA,YAAMM,SAAQ,qBACP,MAAK1B,KADE;AAEVkB,UAAAA,OAAO,oBACA,MAAKlB,KAAL,CAAWkB,OADX,sBAEFO,UAAU,CAACE,EAFT,EAEaF,UAFb;AAFG,UAAd;;AAQA,cAAKjB,QAAL,CAAckB,SAAd;;AACA;AACH;;AAED,UAAME,YAAY,GAAEP,KAAK,CAACC,IAAN,CAAWpB,KAAK,CAACqB,OAAjB,CAApB;AACA,UAAMM,aAAa,GAAGR,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,OAAlB,CAAtB;AAEAK,MAAAA,YAAY,CAACJ,MAAb,CAAoBlB,MAAM,CAACW,KAA3B,EAAiC,CAAjC;AACAY,MAAAA,aAAa,CAACL,MAAd,CAAqBT,WAAW,CAACE,KAAjC,EAAuC,CAAvC,EAAyCD,WAAzC;;AAEA,UAAMc,QAAQ,qBACP5B,KADO;AAEVqB,QAAAA,OAAO,EAAEK;AAFC,QAAd;;AAIA,UAAMG,SAAS,qBACRZ,MADQ;AAEXI,QAAAA,OAAO,EAAEM;AAFE,QAAf,CAnDS,CAuDT;AACA;;;AACA,UAAMH,QAAQ,qBACP,MAAK1B,KADE;AAEVkB,QAAAA,OAAO,oBACA,MAAKlB,KAAL,CAAWkB,OADX,wDAEFY,QAAQ,CAACH,EAFP,EAEWG,QAFX,mCAGFC,SAAS,CAACJ,EAHR,EAGYI,SAHZ;AAFG,QAAd,CAzDS,CAiET;;;AACA,YAAKvB,QAAL,CAAckB,QAAd;AACX,K;;;;;;;6BAIO;AAAA;;AACJ,aACA,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA,oBAAC,eAAD;AACA,QAAA,SAAS,EAAE,KAAKjB,SADhB;AAEA,QAAA,WAAW,EAAE,KAAKR,WAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI,KAAKD,KAAL,CAAWI,WAAX,CAAuB4B,GAAvB,CAA2B,UAACC,SAAD,EAAWhB,KAAX,EAAqB;AAChD,YAAMiB,MAAM,GAAG,MAAI,CAAClC,KAAL,CAAWkB,OAAX,CAAmBe,SAAnB,CAAf;AACA,YAAME,IAAI,GAAGD,MAAM,CAACX,OAAP,CAAeS,GAAf,CAAmB,UAAAI,MAAM;AAAA,iBAAE,MAAI,CAACpC,KAAL,CAAWqC,KAAX,CAAiBD,MAAjB,CAAF;AAAA,SAAzB,CAAb;AAEA,YAAME,cAAc,GAAGrB,KAAK,GAAE,MAAI,CAACjB,KAAL,CAAWG,SAAzC,CAJgD,CAKhD;AACA;;AAEA,eAAO,oBAAC,OAAD;AAAS,UAAA,GAAG,EAAC,aAAb;AAA2B,UAAA,OAAO,EAAE+B,MAApC;AAA4C,UAAA,KAAK,EAAEC,IAAnD;AAAyD,UAAA,cAAc,EAAEG,cAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OATG,CALJ,CAFA,CADA;AAwBH;;;;EAzGa/C,KAAK,CAACgD,S;;AA2GxB/C,QAAQ,CAACgD,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyB7B,QAAQ,CAAC8B,cAAT,CAAwB,MAAxB,CAAzB,E,CACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport intialData from './intialData';\nimport Coloumn from './coloumn'\nimport '@atlaskit/css-reset';\nimport {DragDropContext} from 'react-beautiful-dnd';\nimport styled from 'styled-components';\n\nconst Container= styled.div`\ndisplay: flex,\nmargin: 100%`;\nclass App extends React.Component {\n    state = intialData;\n    onDragStart = start =>{\n        const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId)\n\n        this.setState({\n            homeIndex,\n        });\n    }\n    onDragEnd = result =>{\n        this.setState({\n            homeIndex: null,\n        });\n            document.body.style.color= 'inherit';\n            const { destination, source, draggableId} = result;\n            if(!destination)\n                return;\n            if(\n                destination.droppableId===source.droppableId &&\n                destination.index===source.index\n            ){\n                return;\n            }\n            \n            const start =this.state.columns[source.droppableId];\n            const finish =this.state.columns[destination.droppableId];\n\n            if(start=== finish){\n                    const newTaskIds= Array.from(start.taskIds);\n                    //console.log(newTaskIds);\n                    newTaskIds.splice(source.index,1);\n                    newTaskIds.splice(destination.index,0,draggableId);\n\n\n                    const newColoumn = {\n                        ...start,\n                        taskIds:newTaskIds\n                    };\n                    const newState = {\n                        ...this.state,\n                        columns: {\n                            ...this.state.columns,\n                            [newColoumn.id]:newColoumn,   \n                        }\n                    };\n                    \n                    this.setState(newState);\n                    return;\n                }\n\n                const startTaskIds= Array.from(start.taskIds);\n                const finishTaskIds = Array.from(finish.taskIds);\n                \n                startTaskIds.splice(source.index,1);\n                finishTaskIds.splice(destination.index,0,draggableId);\n               \n                const newStart={\n                    ...start,\n                    taskIds: startTaskIds,\n                };\n                const newFinish={\n                    ...finish,\n                    taskIds: finishTaskIds,\n                };\n                //console.log(newStart);\n                //console.log(newFinish);\n                const newState = {\n                    ...this.state,\n                    columns: {\n                        ...this.state.columns,\n                        [newStart.id]:newStart,\n                        [newFinish.id]:newFinish,  \n                    }\n                };\n                //console.log(newState);\n                this.setState(newState);\n    }\n    \n   \n\n    render(){\n        return (\n        <Container>\n\n        <DragDropContext \n        onDragEnd={this.onDragEnd}\n        onDragStart={this.onDragStart}\n        >\n            {\n            this.state.columnOrder.map((coloumnId,index) => {\n            const colomn = this.state.columns[coloumnId];\n            const task = colomn.taskIds.map(taskId=>this.state.tasks[taskId]);\n            \n            const isDropDisabled = index< this.state.homeIndex;\n            //console.log(this.state.columns.id);\n            //console.log(isDropDisabled);\n\n            return <Coloumn key=\"{colomn.id}\" coloumn={colomn} tasks={task} isDropDisabled={isDropDisabled}/>\n        })}\n        </DragDropContext>\n        </Container>\n        \n        \n\n        );\n    }\n}\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"]},"metadata":{},"sourceType":"module"}